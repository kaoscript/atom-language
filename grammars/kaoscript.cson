'scopeName': 'source.ks'
'fileTypes': [
	'ks'
]
'name': 'kaoscript'
'patterns': [
	{
		'begin': '#\\!?\\['
		'end': '\\]'
		'patterns': [
			{
				'include': '#strings'
			}
		]
		'name': 'meta.attribute.ks'
	}
	{
		'begin': '\\b(func)\\b(?:\\s+([a-zA-Z_$][\\w$]*))?\\('
		'end': '(?<=})'
		'captures':
			'1':
				'name': 'storage.type.function.ks'
			'2':
				'name': 'entity.name.function.ks'
		'patterns': [
			{
				'include': '#function_params'
			}
			{
				'include': '#comments'
			}
			{
				'include': '#function_body'
			}
		]
		'name': 'meta.function.ks'
	}
	{
		'match': '(=>)'
		'captures':
			'0':
				'name': 'meta.function.arrow.ks'
			'1':
				'name': 'storage.type.function.arrow.ks'
	}
	{
		'match': '(new)\\s+([\\w$]+[\\w.$]*)'
		'name': 'meta.class.instance.constructor.ks'
		'captures':
			'1':
				'name': 'keyword.operator.new.ks'
			'2':
				'name': 'entity.name.type.instance.ks'
				'patterns': [
					{
						'match': '\\.'
						'name': 'meta.delimiter.property.period.ks'
					}
				]
	}
	{
		'begin': '''(?x)
			(?=
				\\b[a-zA-Z_$][\\w$]*
				\\s*\\(\\s*
					 (("[^"]*")|(\\'[^\\']*\\')|((?!"|\\'|\\(|\\)).))*
				\\)\\s*\\{
			)
		'''
		'end': '(?<=})'
		'patterns': [
			{
				'include': '#comments'
			}
			{
				'include': '#function_body'
			}
			{
				'begin': '\\G'
				'end': '(?<=\\))'
				'name': 'meta.function.method.definition.ks'
				'patterns': [
					{
						'match': '\\b([a-zA-Z_$][\\w$]*)'
						'name': 'entity.name.function.ks'
					}
					{
						'include': '#function_params'
					}
				]
			}
		]
	}
	{
		'match': '''(?x)
			\\b(class)
			(?:\\s+([a-zA-Z_$][\\w$]*))
			(?:\\s+(extends)\\s+([a-zA-Z_$][\\w$]*))?
		'''
		'captures':
			'1':
				'name': 'storage.type.class.ks'
			'2':
				'name': 'entity.name.type.class.ks'
			'3':
				'name': 'storage.modifier.ks'
			'4':
				'name': 'entity.other.inherited-class.ks'
		'name': 'meta.class.ks'
	}
	{
		'match': '''(?x)
			\\b(enum)
			(?:\\s+([a-zA-Z_$][\\w$]*))
		'''
		'captures':
			'1':
				'name': 'storage.type.enum.ks'
			'2':
				'name': 'entity.name.type.enum.ks'
		'name': 'meta.enum.ks'
	}
	{
		'match': '''(?x)
			\\b(impl)
			(?:\\s+([a-zA-Z_$][\\w$]*))
		'''
		'captures':
			'1':
				'name': 'storage.type.class.ks'
			'2':
				'name': 'entity.name.type.class.ks'
		'name': 'meta.class.ks'
	}
	{
		'include': '#strings'
	}
	{
		'include': '#comments'
	}
	{
		'match': '(?<!\\.)\\b(?<!\\$)(super|this)(?!\\s*:|\\$)\\b'
		'name': 'variable.language.ks'
	}
	{
		'match': '(?<!\\.)\\b(async|extends|final|private|protected|public|static)(?!\\s*:)\\b'
		'name': 'storage.modifier.ks'
	}
	{
		'match': '(?<!\\.)\\b(let|const)(?!\\s*:)\\b'
		'name': 'storage.type.var.ks'
	}
	{
		'match': '(?<!\\.)\\b(await|break|catch|continue|do|else|export|extern|finally|for|if|import|include|return|switch|throw|try|unless|until|while)(?!\\s*:)\\b'
		'name': 'keyword.control.ks'
	}
	{
		'match': '(?<!\\.)\\b(as|by|from|in|is|of|til|to|with)(?!\\s*:)\\b'
		'name': 'keyword.ks'
	}
	{
		'match': '\\.\\.\\.'
		'name': 'keyword.ks'
	}
	{
		'match': '(?<!\\.)\\b(true|false)(?!\\s*:)\\b'
		'name': 'constant.language.boolean.$1.ks'
	}
	{
		'match': '(?<!\\.)\\b(null)(?!\\s*:)\\b'
		'name': 'constant.language.null.ks'
	}
	{
		'match': '''(?x) (?<!\\$) \\b(Array|array|Boolean|bool|class|enum|Function|func|Number|number|Object|object|RegExp|String|string)\\b'''
		'name': 'support.class.ks'
	}
	{
		'match': '\\b(Infinity|NaN)\\b'
		'name': 'constant.language.ks'
	}
	{
		'begin': '(?<=[\\[=(?:+,!]|^|return|=>|&&|\\|\\|)\\s*(/)(?![/*+?])(?=.*/)'
		'beginCaptures':
			'1':
				'name': 'punctuation.definition.string.begin.ks'
		'end': '(/)[gimuy]*'
		'endCaptures':
			'1':
				'name': 'punctuation.definition.string.end.ks'
		'name': 'string.regexp.ks'
		'patterns': [
			{
				'include': 'source.js.regexp'
			}
		]
	}
	{
		'begin': '\\?'
		'beginCaptures':
			'0':
				'name': 'keyword.operator.ternary.ks'
		'end': ':'
		'endCaptures':
			'0':
				'name': 'keyword.operator.ternary.ks'
		'patterns': [
			{
				'include': '#prevent_object_keys_matching'
			}
			{
				'include': '$self'
			}
		]
	}
	{
		'include': '#operators'
	}
	{
		'include': '#method_calls'
	}
	{
		'include': '#function_calls'
	}
	{
		'include': '#numbers'
	}
	{
		'include': '#enum'
	}
	{
		'match': ','
		'name': 'meta.delimiter.object.comma.ks'
	}
	{
		'match': '\\.'
		'name': 'meta.delimiter.method.period.ks'
	}
]
'repository':
	'arguments':
		'patterns': [
			{
				'begin': '\\('
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.arguments.begin.bracket.round.ks'
				'end': '\\)'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.arguments.end.bracket.round.ks'
				'name': 'meta.arguments.ks'
				'patterns': [
					{
						'include': '$self'
					}
				]
			}
		]
	'comments':
		'patterns': [
			{
				'begin': '/\\*\\*(?!/)'
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.comment.ks'
				'end': '\\*/'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.comment.ks'
				'name': 'comment.block.documentation.ks'
				'patterns': [
					{
						'include': '#docblock'
					}
				]
			}
			{
				'begin': '/\\*'
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.comment.ks'
				'end': '\\*/'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.comment.ks'
				'name': 'comment.block.ks'
			}
			{
				'begin': '(^[ \\t]+)?(?=//)'
				'beginCaptures':
					'1':
						'name': 'punctuation.whitespace.comment.leading.ks'
				'end': '(?!\\G)'
				'patterns': [
					{
						'begin': '//'
						'beginCaptures':
							'0':
								'name': 'punctuation.definition.comment.ks'
						'end': '\\n'
						'name': 'comment.line.double-slash.ks'
					}
				]
			}
		]
	'enum':
		'patterns': [
			{
				'match': '([a-zA-Z_$][\\w$]*)(::)([a-zA-Z_$][\\w$]*)'
				'captures':
					'1':
						'name': 'variable.other.enum.ks'
					'2':
						'name': 'meta.delimiter.enum.ks'
					'3':
						'name': 'variable.other.enum.property.ks'
			}
		]
	'function_body':
		'patterns': [
			{
				'begin': '{'
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.function.body.begin.bracket.curly.ks'
				'end': '}'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.function.body.end.bracket.curly.ks'
				'patterns': [
					{
						'include': '$self'
					}
				]
			}
		]
	'function_calls':
		'patterns': [
			{
				# functionCall(arg1, "arg2", [...])
				'begin': '([\\w$]+)\\s*(?=\\()'
				'beginCaptures':
					'1':
						'patterns': [
							{
								'match': "[a-zA-Z_$][\\w$]*"
								'name': 'entity.name.function.ks'
							}
							{
								'match': '\\d[\\w$]*'
								'name': 'invalid.illegal.identifier.ks'
							}
						]
				'end': '(?<=\\))'
				'name': 'meta.function-call.ks'
				'patterns': [
					{
						'include': '#arguments'
					}
				]
			}
		]
	'function_params':
		'patterns': [
			{
				'begin': '\\('
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.parameters.begin.bracket.round.ks'
				'end': '\\)'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.parameters.end.bracket.round.ks'
				'name': 'meta.parameters.ks'
				'patterns': [
					{
						'match': '(\\.\\.\\.)([a-zA-Z_$][\\w$]*)'
						'captures':
							'1':
								'name': 'keyword.operator.spread.ks'
							'2':
								'name': 'variable.parameter.rest.function.ks'
					}
					{
						'include': '$self'
					}
					{
						'match': '[a-zA-Z_$][\\w$]*'
						'name': 'variable.parameter.function.ks'
					}
				]
			}
		]
	'interpolated':
		'patterns': [
			{
				'begin': '\\\\\\('
				'captures':
					'0':
						'name': 'punctuation.section.embedded.ks'
				'end': '\\)'
				'name': 'source.js.embedded.source'
				'patterns': [
					{
						'begin': '\\('
						'beginCaptures':
							'0':
								'name': 'meta.brace.round.ks'
						'end': '\\)'
						'endCaptures':
							'0':
								'name': 'meta.brace.round.ks'
						'patterns': [
							{
								'include': '$self'
							}
						]
					}
					{
						'include': '$self'
					}
				]
			}
		]
	'method_calls':
		'patterns': [
			{
				# .methodCall(arg1, "arg2", [...])
				'begin': '(\\.)\\s*([\\w$]+)\\s*(?=\\()'
				'beginCaptures':
					'1':
						'name': 'meta.delimiter.method.period.ks'
					'2':
						'patterns': [
							{
								'match': "[a-zA-Z_$][\\w$]*"
								'name': 'entity.name.function.ks'
							}
							{
								'match': '\\d[\\w$]*'
								'name': 'invalid.illegal.identifier.ks'
							}
						]
				'end': '(?<=\\))'
				'name': 'meta.method-call.ks'
				'patterns': [
					{
						'include': '#arguments'
					}
				]
			}
		]
	'numbers':
		'patterns': [
			{
				'match': '\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)'
				'name': 'constant.numeric.hex.ks'
			}
			{
				'match': '\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)'
				'name': 'constant.numeric.binary.ks'
			}
			{
				'match': '\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)'
				'name': 'constant.numeric.octal.ks'
			}
			{
				'match': '''(?x)
					(?<!\\$)(?:
						(?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|	# 1.1E+3
						(?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|		# 1.E+3
						(?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|		# .1E+3
						(?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|			# 1E+3
						(?:\\b[0-9]+(\\.)[0-9]+\\b)|				# 1.1
						(?:\\b[0-9]+(\\.)\\B)|						# 1.
						(?:\\B(\\.)[0-9]+\\b)|						# .1
						(?:\\b[0-9]+\\b(?!\\.))						# 1
					)(?!\\$)
				'''
				'captures':
					'0':
						'name': 'constant.numeric.decimal.ks'
					'1':
						'name': 'meta.delimiter.decimal.period.ks'
					'2':
						'name': 'meta.delimiter.decimal.period.ks'
					'3':
						'name': 'meta.delimiter.decimal.period.ks'
					'4':
						'name': 'meta.delimiter.decimal.period.ks'
					'5':
						'name': 'meta.delimiter.decimal.period.ks'
					'6':
						'name': 'meta.delimiter.decimal.period.ks'
			}
		]
	'operators':
		'patterns': [
			{
				'match': '%=|\\+=|-=|\\*=|\\?='
				'name': 'keyword.operator.assignment.compound.ks'
			}
			{
				'match': '&=|\\^=|<<=|>>=|>>=|\\|='
				'name': 'keyword.operator.assignment.compound.bitwise.ks'
			}
			{
				'match': '!=|<=|>=|==|<|>'
				'name': 'keyword.operator.comparison.ks'
			}
			{
				'match': '&&|!|\\|\\|'
				'name': 'keyword.operator.logical.ks'
			}
			{
				'match': '&|\\||\\^|~'
				'name': 'keyword.operator.bitwise.ks'
			}
			{
				'match': '=|:='
				'name': 'keyword.operator.assignment.ks'
			}
			{
				'match': '--'
				'name': 'keyword.operator.decrement.ks'
			}
			{
				'match': '\\+\\+'
				'name': 'keyword.operator.increment.ks'
			}
			{
				'match': '%|\\*|/|-|\\+|\\?'
				'name': 'keyword.operator.ks'
			}
		]
	'strings':
		'patterns': [
			{
				'begin': '\''
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.string.begin.ks'
				'end': '\''
				'endCaptures':
					'0':
						'name': 'punctuation.definition.string.end.ks'
				'name': 'string.quoted.single.ks'
				'patterns': [
					{
						'include': '#string_escapes'
					}
					{
						'match': "[^']*[^\\n\\r'\\\\]$"
						'name': 'invalid.illegal.string.ks'
					}
				]
			}
			{
				'begin': '"'
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.string.begin.ks'
				'end': '"'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.string.end.ks'
				'name': 'string.quoted.double.ks'
				'patterns': [
					{
						'include': '#string_escapes'
					}
					{
						'match': '[^"]*[^\\n\\r"\\\\]$'
						'name': 'invalid.illegal.string.ks'
					}
				]
			}
			{
				'begin': '`'
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.string.begin.ks'
				'end': '`'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.string.end.ks'
				'name': 'string.quoted.template.ks'
				'patterns': [
					{
						'include': '#interpolated'
					}
					{
						'include': '#string_escapes'
					}
				]
			}
		]
	'string_escapes':
		'patterns': [
			{
				'match': '\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^\'"]*'
				'name': 'invalid.illegal.unicode-escape.ks'
			}
			{
				'match': '\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))'
				'name': 'constant.character.escape.ks'
				'captures':
					'1':
						'name': 'punctuation.definition.unicode-escape.begin.bracket.curly.ks'
					'2':
						'patterns': [
							{
								# Max codepoint: \u{10FFFF}
								'match': '[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}'
								'name': 'invalid.illegal.unicode-escape.ks'
							}
						]
					'3':
						'name': 'punctuation.definition.unicode-escape.end.bracket.curly.ks'
			}
			{
				'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
				'name': 'constant.character.escape.ks'
			}
		]